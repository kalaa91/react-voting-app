{"version":3,"sources":["api/client.js","state/question/question.thunks.js","state/question/question.reducer.js","state/question/question.state.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","BaseUrl","fetchQuestions","createAsyncThunk","fetchQuestionById","questionUrl","addNewQuestion","newQuestion","voteQuestion","voteUrl","voteResponse","questionsSlice","createSlice","name","initialState","questions","votingQuestion","status","error","reducers","cancelVoting","state","extraReducers","pending","action","fulfilled","payload","forEach","element","url","id","question","published_at","choices","length","done_voting","rejected","votingUrl","split","questionId","concat","actions","questionAdded","QuestionsPage","React","lazy","VotingPage","AddQuestionPage","App","fallback","exact","path","render","component","to","configureStore","reducer","questionsReducer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","store","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5dc282f9.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { \"Content-Type\": \"application/json\" };\n\n  const config = {\n    method: body ? \"POST\" : \"GET\",\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  let data;\n  try {\n    const response = await window.fetch(endpoint, config);\n    data = await response.json();\n    if (response.ok) {\n      return data;\n    }\n    throw new Error(response.statusText);\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: \"GET\" });\n};\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body, method: \"POST\" });\n};\n\nexport const BaseUrl =\n  process.env.NODE_ENV !== \"production\"\n    ? \"http://polls.apiblueprint.org\"\n    : \"https://polls.apiblueprint.org\";\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { client, BaseUrl } from \"../../api/client\";\n/**\n * List of Thunks used to do async http requests\n */\nexport const fetchQuestions = createAsyncThunk(\n  \"questions/fetchQuestions\",\n  async () => {\n    const response = await client.get(`${BaseUrl}/questions`);\n    return response;\n  }\n);\n\nexport const fetchQuestionById = createAsyncThunk(\n  \"questions/fetchQuestionById\",\n  async (questionUrl) => {\n    const response = await client.get(`${BaseUrl}${questionUrl}`);\n    return response;\n  }\n);\n\nexport const addNewQuestion = createAsyncThunk(\n  \"questions/postQuestion\",\n  async (newQuestion) => {\n    const response = await client.post(`${BaseUrl}/questions`, newQuestion);\n    return response;\n  }\n);\n\nexport const voteQuestion = createAsyncThunk(\n  \"questions/postVote\",\n  async (voteUrl) => {\n    const voteResponse = await client.post(`${BaseUrl}${voteUrl}`);\n    return voteResponse;\n  }\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { initialState } from \"./question.state\";\nimport {\n  addNewQuestion,\n  fetchQuestionById,\n  fetchQuestions,\n  voteQuestion,\n} from \"./question.thunks\";\n\n/**\n * reducer to update store based on actions\n */\nconst questionsSlice = createSlice({\n  name: \"questions\",\n  initialState,\n  reducers: {\n    cancelVoting(state) {\n      state.votingQuestion = null;\n    },\n  },\n  extraReducers: {\n    [fetchQuestions.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchQuestions.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      action.payload.forEach((element) => {\n        state.questions[element.url] = {\n          id: element.url,\n          question: element.question,\n          published_at: element.published_at,\n          choices: element.choices.length,\n          done_voting: false,\n        };\n      });\n    },\n    [fetchQuestions.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = \"Failed To Load Questions\";\n    },\n    [addNewQuestion.fulfilled]: (state, action) => {\n      state.questions[action.payload.url] = {\n        id: action.payload.url,\n        question: action.payload.question,\n        published_at: action.payload.published_at,\n        choices: action.payload.choices.length,\n      };\n    },\n    [fetchQuestionById.pending]: (state, action) => {\n      state.votingQuestion = null;\n    },\n    [fetchQuestionById.fulfilled]: (state, action) => {\n      state.votingQuestion = action.payload;\n    },\n    [fetchQuestionById.rejected]: (state, action) => {\n      state.error = action.error.message;\n    },\n    [voteQuestion.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      const votingUrl = action.payload.url.split(\"/\");\n      const questionId = \"/\".concat(votingUrl[1], \"/\", votingUrl[2]);\n      state.questions[questionId].done_voting = true;\n      state.votingQuestion = null;\n    },\n  },\n});\n\nexport const { questionAdded, cancelVoting } = questionsSlice.actions;\n\nexport default questionsSlice.reducer;\n","/**\n * initial state object model\n */\nexport const initialState = {\n  questions: {},\n  votingQuestion: null,\n  status: \"idle\",\n  error: null,\n};\n","import React, { Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport \"./App.css\";\n\nconst QuestionsPage = React.lazy(() =>\n  import(\"./features/ListQuestions/QuestionsPage\")\n);\nconst VotingPage = React.lazy(() => import(\"./features/Vote/VotingPage\"));\nconst AddQuestionPage = React.lazy(() =>\n  import(\"./features/AddNewQuestion/AddQuestionPage\")\n);\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <QuestionsPage />} />\n          <Route exact path=\"/vote/\" component={VotingPage} />\n          <Route exact path=\"/add-new/\" component={AddQuestionPage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport questionsReducer from \"../state/question/question.reducer\";\nexport default configureStore({\n  reducer: {\n    questions: questionsReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}